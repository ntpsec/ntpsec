// This is the body of the manual page for ntpkeygen.
// It's included in two places: once for the docs/ HTML
// tree, and once to make an individual man page.

[[synop]]
== Synopsis ==
[verse]
+{ntpkeygen}+
  [ +-dM+ ] [ +-b+ 'modulus' ]
  [ +-c+ [ +RSA-MD2+ | +RSA-MD5+ | +RSA-SHA+   | +RSA-SHA1+ |
  +RSA-MDC2+ | +RSA-RIPEMD160+ | +DSA-SHA+ | +DSA-SHA1+ ] ]
  [ +-C+ 'cipher' ] [ +-m+ 'modulus' ]

[[descrip]]
== Description ==

This program generates cryptographic data files used by the NTPv4
authentication and identity schemes. It can generate MD5 message digest keys
used in symmetric key cryptography.

All files are in PEM-encoded printable ASCII format, so they can be
embedded as MIME attachments in mail to other sites and certificate
`authorities. By default, files are not encrypted.

When used to generate message digest keys, the program produces a file
containing ten pseudo-random printable ASCII strings suitable for the
MD5 message digest algorithm included in the distribution. If the
OpenSSL library is installed, it produces an additional ten hex-encoded
random bit strings suitable for the SHA1 and other message digest
algorithms. The message digest keys file must be distributed and stored
using secure means beyond the scope of NTP itself. Besides the keys used
for ordinary NTP associations, additional keys can be defined as
passwords for the link:ntpq.html[+{ntpq}+] utility program.

The remaining generated files are compatible with other OpenSSL
applications and other Public Key Infrastructure (PKI) resources.
Certificates generated by this program are compatible with extant
industry practice, although some users might find the interpretation of
X509v3 extension fields somewhat liberal.

The +pw+ option of the +crypto+ configuration command specifies the read
password for previously encrypted local files. This must match the local
password used by this program. If not specified, the host name is used.
Thus, if files are generated by this program without password, they can
be read back by +{ntpd}+ without password, but only on the same host.

Normally, encrypted files for each host are generated by that host and
used only by that host, although exceptions exist as noted later on this
page. The symmetric keys file, normally called +{ntpkeys}+, is usually
installed in +/etc+. Other files and links are usually installed in
+/usr/local/etc+, which is normally in a shared filesystem in
NFS-mounted networks and cannot be changed by shared clients. The
location of the keys directory can be changed by the +keysdir+
configuration command in such cases. Normally, this is in +/etc+.

This program directs commentary and error messages to the standard error
stream +stderr+ and remote files to the standard output stream +stdout+
where they can be piped to other applications or redirected to files.
The names used for generated files and links all begin with the string
+ntpkey+ and include the file type, generating host and filestamp, as
described in the link:#fmt[Cryptographic Data Files] section below

[[cmd]]
== Command Line Options ==

+-b+ 'modulus', +--imbits+='modules'::
  Set the modulus for generating identity keys to _modulus_ bits. The
  modulus defaults to 256, but can be set from 256 (32 octets) to 2048
  (256 octets). Use the larger moduli with caution, as this can consume
  considerable computing resources and increases the size of
  authenticated packets.
+-c [ RSA-MD2 | RSA-MD5 | RSA-SHA | RSA-SHA1 | RSA-MDC2 | RSA-RIPEMD160 | DSA-SHA | DSA-SHA1 ]+::
  Select certificate digital signature and message digest scheme. Note
  that RSA schemes must be used with an RSA sign key and DSA schemes
  must be used with a DSA sign key. The default without this option is
  +RSA-MD5+. If compatibility with FIPS 140-2 is required, either the
  +DSA-SHA+ or +DSA-SHA1+ scheme must be used.  The long option
  +--certificate+ is synonymous.
+-C+ 'cipher', +--cipher+='cipher'::
  Select the OpenSSL cipher to use for password-protected keys. The
  +openssl -h+ command provided with OpenSSL displays available ciphers.
  The default without this option is +des-ede3-cbc+ - three-key triple
  DES in CBC mode. The openssl tool lists ciphers available in
  +openssl -h+ output.
+-d+, +--debug+::
  Enable debugging. This option displays the cryptographic data produced
  for eye-friendly billboards. It may appear an unlimited number of
  times, enabling higher levels of debugging.
+-D+ number, +--set-debug-level+=_number_::
  Set the debug verbosity level. This option may appear an unlimited
  number of times. This option takes an integer number as its argument.
+-m+ 'modulus', +--modulus+=_modulus_::
  Set the modulus for generating files to _modulus_ bits. The modulus
  defaults to 512, but can be set from 256 (32 octets) to 2048 (256
  octets). Use the larger moduli with caution, as this can consume
  considerable computing resources and increases the size of
  authenticated packets.
+-M+, +--md5key+::
  Generate a new keys file containing 10 MD5 keys and 10 SHA keys. An
  MD5 key is a string of 20 random printable ASCII characters, while a
  SHA key is a string of 40 random hex digits. The file can be edited
  using a text editor to change the key type or key content. This option
  is mutually exclusive with all other option.

[[run]]
== Running the program ==

The safest way to run the +{ntpkeygen}+ program is logged in directly as
root. The recommended procedure is change to the keys directory, usually
+/usr/local/etc+, then run the program. When run for the first time, or
if all _ntpkey_ files have been removed, the program generates a RSA
host key file and matching RSA-MD5 certificate file, which is all that
is necessary in many cases. The program also generates soft links from
the generic names to the respective files. If run again, the program
uses the same host key file, but generates a new certificate file and
link.

The host key is used to encrypt the cookie when required and so must be
RSA type. By default, the host key is also the sign key used to encrypt
signatures. When necessary, a different sign key can be specified and
this can be either RSA or DSA type. By default, the message digest type
is MD5, but any combination of sign key type and message digest type
supported by the OpenSSL library can be specified, including those using
the MD2, MD5, SHA, SHA1, MDC2 and RIPE160 message digest algorithms.
However, the scheme specified in the certificate must be compatible with
the sign key. Certificates using any digest algorithm are compatible
with RSA sign keys; however, only SHA and SHA1 certificates are
compatible with DSA sign keys.

Private key files and certificates are compatible with other
OpenSSL applications and very likely other libraries as well.
Certificates or certificate requests derived from them should be
compatible with extant industry practice, although some users might find
the interpretation of X509v3 extension fields somewhat liberal.

Running the program as other than root and using the Unix _su_ command
to assume root may not work properly, since by default the OpenSSL
library looks for the random seed file +.rnd+ in the user home
directory. However, there should be only one +.rnd+, most conveniently
in the root directory, so it is convenient to define the _$RANDFILE_
environment variable used by the OpenSSL library as the path to +/.rnd+.

Installing the keys as root might not work in NFS-mounted shared file
systems, as NFS clients may not be able to write to the shared keys
directory, even as root. In this case, NFS clients can specify the files
in another directory such as +/etc+ using the _keysdir_ command.

Ordinarily, cryptographic files are generated by the host that uses
them, but it is possible for a trusted agent (TA) to generate these
files for other hosts; however, in such cases files should always be
encrypted. The subject name and trusted name default to the hostname of
the host generating the files, but can be changed by command line
options. It is convenient to designate the owner name and trusted name
as the subject and issuer fields, respectively, of the certificate. The
owner name is also used for the host and sign key files, while the
trusted name is used for the identity files.

[[access]]
== Key file access and location ==

The {ntpdman} configuration command _crypto_ _pw_ _password_
specifies the read password for previously encrypted files. The daemon
expires on the spot if the password is missing or incorrect. For
convenience, if a file has been previously encrypted, the default read
password is the name of the host running the program. If the previous
write password is specified as the host name, these files can be read by
that host with no explicit password.

File names begin with the prefix _ntpkey__ and end with the postfix
__hostname.filestamp_, where _hostname_ is the owner name, usually the
string returned by the Unix gethostname() routine, and _filestamp_ is
the NTP seconds when the file was generated, in decimal digits. This
both guarantees uniqueness and simplifies maintenance procedures, since
all files can be quickly removed by a _rm_ _ntpkey*_ command or all
files generated at a specific time can be removed by a _rm_ _*filestamp_
command. To further reduce the risk of misconfiguration, the first two
lines of a file contain the file name and generation date and time as
comments.

All files are installed by default in the keys directory
+/usr/local/etc+, which is normally in a shared filesystem in
NFS-mounted networks. The actual location of the keys directory and each
file can be overridden by configuration commands, but this is not
recommended. Normally, the files for each host are generated by that
host and used only by that host, although exceptions exist as noted
later on this page.

Normally, files containing private values, including the host key, sign
key and identification parameters, are permitted root read/write-only;
while others containing public values are permitted world readable.
Alternatively, files containing private values can be encrypted and
these files permitted world readable, which simplifies maintenance in
shared file systems. Since uniqueness is insured by the hostname and
file name extensions, the files for a NFS server and dependent clients
can all be installed in the same shared directory.

The recommended practice is to keep the file name extensions when
installing a file and to install a soft link from the generic names
specified elsewhere on this page to the generated files. This allows new
file generations to be activated simply by changing the link. If a link
is present, {ntpd} follows it to the file name to extract the filestamp.
If a link is not present, {ntpdman} extracts the filestamp from
the file itself. This allows clients to verify that the file and
generation times are always current. The +{ntpkeygen}+ program uses the
same timestamp extension for all files generated at one time, so each
generation is distinct and can be readily recognized in monitoring data.

[[trust]]
== Trusted Hosts and Groups ==

Each cryptographic configuration involves selection of
a signature scheme and identification scheme, called a cryptotype, as
explained in the _Authentication Options_ section of {ntpdconfman}.
The default cryptotype uses RSA encryption, MD5 message digest and TC
identification. First, configure a NTP subnet including one or more
low-stratum trusted hosts from which all other hosts derive
synchronization directly or indirectly. Trusted hosts have trusted
certificates; all other hosts have nontrusted certificates. These hosts
will automatically and dynamically build authoritative certificate
trails to one or more trusted hosts. A trusted group is the set of all
hosts that have, directly or indirectly, a certificate trail ending at a
trusted host. The trail is defined by static configuration file entries
or dynamic means described on the _Automatic_ _NTP_ _Configuration_
_Options_ section of {ntpdconfman}.

On each trusted host as root, change to the keys directory. To insure a
fresh fileset, remove all _ntpkey_ files. Then run +{ntpkeygen}+ +-T+ to
generate keys and a trusted certificate. On all other hosts do the same,
but leave off the +-T+ flag to generate keys and nontrusted
certificates. When complete, start the NTP daemons beginning at the
lowest stratum and working up the tree.

If it is necessary to use a different sign key or different
digest/signature scheme than the default, run +{ntpkeygen}+ with the +-S+
type option, where _type_ is either _RSA_ or _DSA_. The most often need
to do this is when a DSA-signed certificate is used. If it is necessary
to use a different certificate scheme than the default, run +{ntpkeygen}+
with the +-c+ scheme option and selected _scheme_ as needed. f
+{ntpkeygen}+ is run again without these options, it generates a new
certificate using the same scheme and sign key.

After setting up the environment it is advisable to update certificates
from time to time, if only to extend the validity interval. Simply run
+{ntpkeygen}+ with the same flags as before to generate new certificates
using existing keys. However, if the host or sign key is changed,
{ntpdman} should be restarted. When {ntpdman} is
restarted, it loads any new files and restarts the protocol. Other
dependent hosts will continue as usual until signatures are refreshed,
at which time the protocol is restarted.

[[ident]]
== Identity Schemes ==

As mentioned on the Autonomous Authentication page, the default TC
identity scheme is vulnerable to a middleman attack. However, there are
more secure identity schemes available, including PC, IFF, GQ and MV
described on the "Identification Schemes" page (maybe available at
_http://www.eecis.udel.edu/%7emills/keygen.html_). These schemes are
based on a TA, one or more trusted hosts and some number of nontrusted
hosts. Trusted hosts prove identity using values provided by the TA,
while the remaining hosts prove identity using values provided by a
trusted host and certificate trails that end on that host. The name of a
trusted host is also the name of its sugroup and also the subject and
issuer name on its trusted certificate. The TA is not necessarily a
trusted host in this sense, but often is.

In some schemes there are separate keys for servers and clients. A
server can also be a client of another server, but a client can never be
a server for another client. In general, trusted hosts and nontrusted
hosts that operate as both server and client have parameter files that
contain both server and client keys. Hosts that operate only as clients
have key files that contain only client keys.

The PC scheme supports only one trusted host in the group. On trusted
host alice run +{ntpkeygen}+ +-P+ +-p+ password to generate the host key
file _ntpkey_RSAkey_alice.filestamp_ and trusted private certificate
file _ntpkey_RSA-MD5_cert_alice.filestamp_. Copy both files to all group
hosts; they replace the files which would be generated in other schemes.
On each host bob install a soft link from the generic name
_ntpkey_host_bob_ to the host key file and soft link _ntpkey_cert_bob_
to the private certificate file. Note the generic links are on bob, but
point to files generated by trusted host alice. In this scheme it is not
possible to refresh either the keys or certificates without copying them
to all other hosts in the group.

For the IFF scheme proceed as in the TC scheme to generate keys and
certificates for all group hosts, then for every trusted host in the
group, generate the IFF parameter file. On trusted host alice run
+{ntpkeygen}+ +-T+ +-I+ +-p+ password to produce her parameter file
_ntpkey_IFFpar_alice.filestamp_, which includes both server and client
keys. Copy this file to all group hosts that operate as both servers and
clients and install a soft link from the generic _ntpkey_iff_alice_ to
this file. If there are no hosts restricted to operate only as clients,
there is nothing further to do. As the IFF scheme is independent of keys
and certificates, these files can be refreshed as needed.

If a rogue client has the parameter file, it could masquerade as a
legitimate server and present a middleman threat. To eliminate this
threat, the client keys can be extracted from the parameter file and
distributed to all restricted clients. After generating the parameter
file, on alice run +{ntpkeygen} -e+ and pipe the output to a file or
mail program. Copy or mail this file to all restricted clients. On these
clients install a soft link from the generic _ntpkey_iff_alice_ to this
file. To further protect the integrity of the keys, each file can be
encrypted with a secret password.

For the GQ scheme proceed as in the TC scheme to generate keys and
certificates for all group hosts, then for every trusted host in the
group, generate the IFF parameter file. On trusted host alice run
+{ntpkeygen} -T -G -p+ password to produce her parameter file
_ntpkey_GQpar_alice.filestamp_, which includes both server and client
keys. Copy this file to all group hosts and install a soft link from the
generic _ntpkey_gq_alice_ to this file. In addition, on each host bob
install a soft link from generic _ntpkey_gq_bob_ to this file. As the GQ
scheme updates the GQ parameters file and certificate at the same time,
keys and certificates can be regenerated as needed.

For the MV scheme, proceed as in the TC scheme to generate keys and
certificates for all group hosts. For illustration assume trish is the
TA, alice one of several trusted hosts and bob one of her clients. On TA
trish run +{ntpkeygen} -V n -p+ password, where _n_ is the number of
revokable keys (typically 5) to produce the parameter file
_ntpkeys_MVpar_trish.filestamp_ and client key files
_ntpkeys_MVkeyd_trish.filestamp_ where _d_ is the key number (0 < _d_ <
_n_). Copy the parameter file to alice and install a soft link from the
generic _ntpkey_mv_alice_ to this file. Copy one of the client key files
to alice for later distribution to her clients. It doesn't matter which
client key file goes to alice, since they all work the same way. Alice
copies the client key file to all of her cliens. On client bob install a
soft link from generic _ntpkey_mvkey_bob_ to the client key file. As the
MV scheme is independent of keys and certificates, these files can be
refreshed as needed.

[[random]]
== Random Seed File ==

All cryptographically sound key generation schemes must have means to
randomize the entropy seed used to initialize the internal pseudo-random
number generator used by the library routines. The OpenSSL library uses
a designated random seed file for this purpose. The file must be
available when starting the NTP daemon and +{ntpkeygen}+ program. If a
site supports OpenSSL or its companion OpenSSH, it is very likely that
means to do this are already available.

It is important to understand that entropy must be evolved for each
generation, for otherwise the random number sequence would be
predictable. Various means dependent on external events, such as
keystroke intervals, can be used to do this and some systems have
built-in entropy sources. Suitable means are described in the OpenSSL
software documentation, but are outside the scope of this page.

The entropy seed used by the OpenSSL library is contained in a file,
usually called +.rnd+, which must be available when starting the NTP
daemon or the +{ntpkeygen}+ program. The NTP daemon will first look for
the file using the path specified by the _randfile_ subcommand of the
_crypto_ configuration command. If not specified in this way, or when
starting the +{ntpkeygen}+ program, the OpenSSL library will look for the
file using the path specified by the RANDFILE environment variable in
the user home directory, whether root or some other user. If the
RANDFILE environment variable is not present, the library will look for
the +.rnd+ file in the user home directory. If the file is not available
or cannot be written, the daemon exits with a message to the system log
and the program exits with a suitable error message.

[[crypto]]
== Cryptographic Data Files ==

File and link names are in the form _ntpkey_key_name.fstamp_, where
_key_ is the key or parameter type, _name_ is the host or group name and
_fstamp_ is the filestamp (NTP seconds) when the file was created). By
convention, _key_ names in generated file names include both upper and
lower case characters, while _key_ names in generated link names
include only lower case characters. The filestamp is not used in
generated link names.

The _key_ name is a string defining the cryptographic key type. Key
types include public/private keys +host+ and +sign+, certificate +cert+
and several challenge/response key types. By convention, client files
used for challenges have a +par+ subtype, as in the IFF challenge
+IFFpar+, while server files for responses have a +key+ subtype, as in
the GQ response +GQkey+.

All other file formats begin with two lines. The first contains the file
name, including the generated host name and filestamp. The second
contains the datestamp in conventional Unix date format. Lines beginning
with # are considered comments and ignored by the +{ntpkeygen}+ program
and {ntpdman} daemon. Cryptographic values are encoded first
using ASN.1 rules, then encrypted if necessary, and finally written
PEM-encoded printable ASCII format preceded and followed by MIME content
identifier lines.

Note that the keys used by the {ntpqman} program are checked
against passwords requested by the programs and entered by hand, so it
is generally appropriate to specify these keys in human readable ASCII
format.

The +{ntpkeygen}+ program generates a MD5 symmetric keys file
_ntpkey_MD5key_hostname.filestamp_. Since the file contains private
shared keys, it should be visible only to root and distributed by secure
means to other subnet hosts. The NTP daemon loads the file _{ntpkeys}_,
so +{ntpkeygen}+ installs a soft link from this name to the generated
file. Subsequently, similar soft links must be installed by manual or
automated means on the other subnet hosts. This file is needed to
authenticate some remote configuration commands used by the {ntpqman}
utility.

The format of the symmetric keys file is somewhat different than the
other files in the interest of backward compatibility. Since DES-CBC is
deprecated in NTPv4, the only key format of interest is MD5 alphanumeric
strings. Following the header the keys are entered one per line in the
format _keyno_ _type_ _key_ where _keyno_ is a positive integer in the
range 1-65,535, _type_ is the string MD5 defining the key format and
_key_ is the key itself, which is a printable ASCII string 16 characters
or less in length. Each character is chosen from the 93 printable
characters in the range 0x21 through 0x7f excluding space and the ‘#’
character.

// end
