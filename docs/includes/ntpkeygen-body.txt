// This is the body of the manual page for ntpkeygen.
// It's included in two places: once for the docs/ HTML
// tree, and once to make an individual man page.

[[synop]]
== Synopsis ==
[verse]
+ntpkeygen+ [ +-M+ ]

[[descrip]]
== Description ==

This program generates the MD5 message digest keys used in NTP's symmetric
key cryptography.

The program produces a file containing ten pseudo-random printable
ASCII strings suitable for the MD5 message digest algorithm included
in the distribution. If the OpenSSL library is installed, it produces
an additional ten hex-encoded random bit strings suitable for the SHA1
and other message digest algorithms. The message digest keys file must
be distributed and stored using secure means beyond the scope of NTP
itself. Besides the keys used for ordinary NTP associations,
additional keys can be defined as passwords for the
link:ntpq.html[+ntpq+] utility program.

[[cmd]]
== Command Line Options ==

+-M+, +--md5key+::
  Dummy option for backward compatibility in old scripts.  This
  program always runs in -M mode.

[[run]]
== Running the program ==

The safest way to run the +ntpkeygen+ program is logged in directly as
root. The recommended procedure is change to the keys directory, usually
+/usr/local/etc+, then run the program.

Running the program as other than root and using the Unix _su_ command
to assume root may not work properly, since by default the OpenSSL
library looks for the random seed file +.rnd+ in the user home
directory. However, there should be only one +.rnd+, most conveniently
in the root directory, so it is convenient to define the _$RANDFILE_
environment variable used by the OpenSSL library as the path to +/.rnd+.

Installing the keys as root might not work in NFS-mounted shared file
systems, as NFS clients may not be able to write to the shared keys
directory, even as root. In this case, NFS clients can specify the files
in another directory such as +/etc+ using the _keysdir_ command.

[[access]]
== Key file access and location ==

The {ntpdman} configuration command _crypto_ _pw_ _password_
specifies the read password for previously encrypted files. The daemon
expires on the spot if the password is missing or incorrect. For
convenience, if a file has been previously encrypted, the default read
password is the name of the host running the program. If the previous
write password is specified as the host name, these files can be read by
that host with no explicit password.

File names begin with the prefix _ntpkey__ and end with the postfix
__hostname.filestamp_, where _hostname_ is the owner name, usually the
string returned by the Unix gethostname() routine, and _filestamp_ is
the NTP seconds when the file was generated, in decimal digits. This
both guarantees uniqueness and simplifies maintenance procedures, since
all files can be quickly removed by a _rm_ _ntpkey*_ command or all
files generated at a specific time can be removed by a _rm_ _*filestamp_
command.

All files are installed by default in the keys directory
+/usr/local/etc+, which is normally in a shared filesystem in
NFS-mounted networks. The actual location of the keys directory and each
file can be overridden by configuration commands, but this is not
recommended. Normally, the files for each host are generated by that
host and used only by that host, although exceptions exist as noted
later on this page.

[[random]]
== Random Seed File ==

All cryptographically sound key generation schemes must have means to
randomize the entropy seed used to initialize the internal pseudo-random
number generator used by the library routines. The OpenSSL library uses
a designated random seed file for this purpose. The file must be
available when starting the NTP daemon and +ntpkeygen+ program. If a
site supports OpenSSL or its companion OpenSSH, it is very likely that
means to do this are already available.

It is important to understand that entropy must be evolved for each
generation, for otherwise the random number sequence would be
predictable. Various means dependent on external events, such as
keystroke intervals, can be used to do this and some systems have
built-in entropy sources. Suitable means are described in the OpenSSL
software documentation, but are outside the scope of this page.

The entropy seed used by the OpenSSL library is contained in a file,
usually called +.rnd+, which must be available when starting the NTP
daemon or the +ntpkeygen+ program. The NTP daemon will first look for
the file using the path specified by the _randfile_ subcommand of the
_crypto_ configuration command. If not specified in this way, or when
starting the +ntpkeygen+ program, the OpenSSL library will look for the
file using the path specified by the RANDFILE environment variable in
the user home directory, whether root or some other user. If the
RANDFILE environment variable is not present, the library will look for
the +.rnd+ file in the user home directory. If the file is not available
or cannot be written, the daemon exits with a message to the system log
and the program exits with a suitable error message.

[[crypto]]
== Cryptographic Data Files ==

The +ntpkeygen+ program generates a MD5 symmetric keys file
_ntpkey_MD5key_hostname.filestamp_. Since the file contains private
shared keys, it should be visible only to root and distributed by secure
means to other subnet hosts. The NTP daemon loads the file _ntp.keys_,
so +ntpkeygen+ installs a soft link from this name to the generated
file. Subsequently, similar soft links must be installed by manual or
automated means on the other subnet hosts. This file is needed to
authenticate some remote configuration commands used by the {ntpqman}
utility.

Following the header the keys are entered one per line in the
format _keyno_ _type_ _key_ where _keyno_ is a positive integer in the
range 1-65,535, _type_ is the string MD5 defining the key format and
_key_ is the key itself, which is a printable ASCII string 16 characters
or less in length. Each character is chosen from the 93 printable
characters in the range 0x21 through 0x7f excluding space and the ‘#’
character.

// end
