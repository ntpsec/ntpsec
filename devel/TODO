= TO DO =

== Checklist for a quality 1.0 release ==

=== Build system ===

* Document build files.

* Cleanup and separate features in pylib/*

* Add 'snapshot' feature to dump config status into a JSON file for collecting
  build + platform information

* The install production needs to warn of stale ntpdc and ntpdate binaries.

* Add support for enabling all conditional checks to ensure none are broken.

* Add support for disabling specific conditional tests to ensure nothing is
  compiled into the base in a surprising fashion, e.g. --undefine=FOO should
  suppress generation of any FOO #define into config.h.

* Add support for enabling hidden features and/or
  internal symbols for testing, e.g --define FOO=BAR generates #define
  FOO BAR into config.h.

* Add monkeypatch for rmdir, rmtree under Windows.

* ntpdsim does not quite build.  There is something wrong with the way waf is
  setting up the linkage.  To reproduce, remove the "if 0" near the end of
  ntpd/wscript.

=== Code ===

* We need a build time option to disable all dangerous operations
  that ntpq can produce.  First we need to enumerate them.

* systime.c needs patching to put ntpdsim's hook back in place. Deferred
  until the ntpdsim build is fixed.

* Can the KERNEL_PLL code be removed? It's used by drivers 4, 8, 20, 22, and
  30, but Hal thinks it may no longer have a point since processors are much
  faster and schedulers smoother than when it was built.  Might remove the
  need for adjtimex(2). We need to collect statistics on builds with and
  without the PLL to see if it's actually a win.

* From refclock_params in ntpd/ntp_refclock.c: " FreeBSD serial ports
  provide capture on the clear edge, while FreeBSD parallel ports
  provide capture on the assert edge.: Needs checking.

=== Testing ===

* Unit testing.  "waf check" needs to run all the unit tests, not
  just the small fraction it does.

* We need to live-test various refclocks.  It would be nice
  to test the full matrix of refclock x platform, but that's too
  much work.  We should probably test as many refclocks as we can
  on at least one platform and test the NMEA, Atom, and SHM drivers
  on most platforms.

* The script tests in scripts/t should be investigated, perhaps
  they are salvageable.

=== Documentation ===

* Short doc on how to tell your ntpd is running correctly.
  Perhaps lifted from GPSD Time Service HOWTO?

== After 1.0 release ==

=== Slow convergence ===

[quote, Gary Miller]
__________
ntpd takes way, way, way longer to converge than chronyd.  Which is
why on the fly reconfiguation in ntpd is SO important.  Last thing you
ever want to do is restart ntpd.

Right now, after 10 mins, ntpd has 2,000 times the jitter as chronyd had
when I turned it off.
__________


== User interface ==

[quote, Gary Miller]
__________
'ntpq -p' is user hostile compared to 'chronyc sources'.  chronyc adds
units to the display, so you do not have to keep referring to them
manual, and it makes it easy to deal with jitter and delay that
varies by orders of magnitude.

So, instead of this:

     remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
-india.colorado. .NIST.           1 u   33   64  377   79.023  -11.071  10.247
 140.142.16.34   .INIT.          16 u    -  256    0    0.000    0.000   0.000
+clepsydra.labs. .GPS.            1 u   28   64  377   26.473   15.307   4.261
+catbert.rellim. .GPS1.           1 u   31   64  377    0.200   22.061   6.440
-SHM(0)          .GPS.            0 l   45   64  377    0.000  151.500  15.858
*SHM(1)          .GPS1.           0 l   44   64  377    0.000   20.870   7.680
+131.107.13.100  .ACTS.           1 u   25   64  337   14.746   18.469   6.634

I see this:

dagwood ~ # chronyc sources
210 Number of sources = 11
MS Name/IP address         Stratum Poll Reach LastRx Last sample
===============================================================================
#- SHM0                          0   4   377    19   +119ms[ +119ms] +/-  501ms
#- SHM1                          0   4   377    21   +276us[ +276us] +/-   13us
#* SOC2                          0   4   377    22   +260us[ +291us] +/-   24us
#? SOC3                          0   4     0  247d  +7275ms[  +99us] +/-  230ms
^x catbert.rellim.com            1   8   377     0  -1566us[-1566us] +/- 1564us
^- spidey.rellim.com             1   6   377    54    +18ms[  +18ms] +/-   27ms
^- kong.rellim.com               2  10   377   177   -722us[ -735us] +/- 2004us
^- ha2.smatwebdesign.com         2  10   177   492  -2890us[-2905us] +/-  103ms
^- soft-sea-01.servers.octos     2  10   377   775  -5897us[-5843us] +/-   83ms
^- gw-kila-wl0.ipv6.avioc.or     2  10   377   17m   -519us[ -640us] +/-   64ms
^- 66.241.101.63                 2  10   377   449  +7966us[+7973us] +/-   52ms

Neither is ideal, easy pickings for someone to code on.

=== Future plans ===

* ntpd is remarkably bad at standalone Stratum 1 - requires multiple chimers
  (and multiple inbound NTP connections, and a hole in your firewall) even when
  it has a known-good local timesource like a GPS.  This should be fixed.

* ntpproto.py - a Python library that knows the NTP wire protocol and
  can be used to generate and interpret packets.  Daniel has speculated
  about writing this in order to test possible exploits, but there are
  other uses.  Translate it from the Perl protcol library under scripts/lib.

* Use ntpproto.py to translate the Perl stuff under scripts/ to Python.

* Hal says "We need a way to inspect/debug bits on the wire. `ntpdate
  -du' is the traditional approach."  Hal's straw man is a new program
  rather than trying to make ntpdig do this.  Eric's proposed answer:
  ntpshark, a command interpreter written around ntpproto.py and
  loosely modeled on wireshark.

* Replace ntpq with a Python wrapper around ntpproto.py.

* We might be able to eliminate a lot of the Linux runtime
  droproot code by using file capabilities.

* Better ANSI/POSIX conformance in MinGW and Visual Studio 2013 might
  enable us to get rid of the SYS_WINNT code. Should be tried...

* There is a mess around the symbols NO_MAIN_ALLOWED, BUILD_AS_LIB, and
  LIBNTP_C that needs to be refactored.  ntpd should *always* be built as
  a library linked to a main module, these guard symbols should go away.

* seccomp sandboxing fails to build under Ubuntu due to some confusion
  in the Linux headers.  Investigate.

* Use the snprintb in util/ntptime for flag words like flash
  codes and use it systematically to make reports more readable.

* Timer events need, as much as possible, to be eliminated - they eat
  power on laptops and mobile devices, usually unnecessarily.

* Take another look at SHM.  Hal thinks we can make a version that is
  read-only and solid.  Maybe write a support package that does all the
  work if you call it with the date/time.

[quote, Hal]
__________
I think there is some interaction between when the ACTS driver calls and the
state of other stuff, like the connection to the net.  This is probably a
good candidate to get cleaned up.

There is another possible tangle in this area.  If you set "noselect" on the
server line in the config file, ntpd goes through all the action of
collecting the data and writing log files, but then drops the clock.  I don't
know things well enough to be sure that this sort of logic won't pick one
back up.
__________


== Potential device removals ==

* Modes 9 and 10 in the parse driver support hardware that was discontinued
  before 2003.

== Old, sometime ancient stuff ==

970711: Look Real Hard at changing the key stuff from u_long to u_int32.

970711: Make sure it's safe to convert proto_config's 2nd argument from
	u_long to u_int32.  Watch "set" in ntp_request.c:setclr_flags().

970318: in hourly_stats(?), squawk if the magnitude of the drift is,
	say, >400.


== Simple Tasks for an intern ==

[quote, ESR 2015-09-30]

* Write C++ required to glue the unit tests under test/ to Unity so they
  run when 'waf check is called.  (Daniel Franke may be working on this,
  but it's not a good use of his time - we want him concentrating on vulns
  and security auditing.)  Requires basic C++ skills.

* In the docs subdirectory, include/command.txt is an HTML passthrough
  in a not entirely successful attempt to emulate the look of the
  Mills HTML documentation this directory was made from. It should be
  cleaned up or replaced.  Requires HTML and CSS skills; intern must
  be willing to learn asciidoc.

* Similarly, includes/footer.txt is a tabular hack made to resemble
  the old HTML and should be cleaned up.  Requires HTML and CSS
  skills; intern must be willing to learn asciidoc

* seccomp sandboxing fails to build under Ubuntu, apparently due to
  some confusion in the Linux headers.  Investigate and report.
  Requires basic C skills.

* All Perl should be translated to Python for maintainability. Look
  under scripts/. Requires Perl and Python skills.  It is possible
  some of this is no longer useful - Daniel says some of it is in Perl 4!

* In scripts/t/ are, apparently, unit tests for the stuff in scripts/.
  Some attempt should be made to salvage these. Requires Perl and
  Python skills.
