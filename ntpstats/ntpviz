#!/usr/bin/env python
# coding: utf-8
"""\
ntpviz - logfile visualizer for NTP log files

Usage: ntpviz [-d statsdir] [-g] [-n name] [-p days]
              [-s starttime]  [-e endtime]
              [--local-offset | --local-error | --local-jitter
                | --local-stability | --local-offset-histogram
                | --peer-offsets=hosts | --all-peer-offsets
                | --peer-jitters=hosts | --all-peer-jitters
                | --local-temps
                | --local-gps
                | --local-offset-multiplot]
              [-o outdir]
              [-D N]

See the manual page for details.

Python by ESR, concept and GNUPLOT code by Dan Drown.
"""
#SPDX-License-Identifier: BSD-2-Clause
from __future__ import print_function, division

import atexit, binascii, collections, getopt, os, socket, sys, time
from ntp.statfiles import *

def print_profile():
    """called by atexit() on normal exit to print profile data"""
    pr.disable()
    pr.print_stats('tottime')
    pr.print_stats('cumtime')

# standard deviation functions
# use this until we can guarantee Python 3.4 and the statistics module
# http://stackoverflow.com/questions/15389768/standard-deviation-of-a-list#21505523

def mean(data):
    """Return the sample arithmetic mean of data."""
    n = len(data)
    if n < 1:
        raise ValueError('mean requires at least one data point')
    return sum(data)/n # in Python 2 use sum(data)/float(n)

def _ss(data, mu=None):
    """Return sum of square deviations of sequence data."""
    if mu is None:
        c = mean(data)
    else:
        c = mu
    ss = sum((x-c)**2 for x in data)
    return ss

# fixme, need to handle mu=mean
def pstdev(data, mu=None):
    """Calculates the population standard deviation."""
    n = len(data)
    if n < 2:
        raise ValueError('variance requires at least two data points')
    ss = _ss(data, mu)
    pvar = ss/n # the population variance
    return pvar**0.5

# end standard deviation functions
# RMS frequency jitter - Deviation from a root-mean-square linear approximation?
# Investigate.

def gnuplot(template, outfile=None):
    "Run a specified GNUPLOT program."
    if not len( template ):
        # silently ignore empty plots
        return ''
    if outfile is None:
        out = None
    else:
        out = open(outfile, "w")
    # shell=True is a security hazard
    proc = subprocess.Popen("gnuplot",
                            shell=False, bufsize=4096,
                            stdin=subprocess.PIPE, stdout=out)
    # next line works in Python 3, not Python 2
    # proc.stdin.write(template.encode('ascii','ignore'))
    # next line works in Python 2, not Python 3
    proc.stdin.write(template)
    proc.stdin.close()
    return proc.wait()

def plotwrap(imagename, image, outfile):
    "Generate an image and index section for a GNUPLOT section."
    gnuplot(image, os.path.join(outdir, imagename + ".png"))
    div_name = imagename.replace('-', ' ')
    div = '''\
<div>
  <h3>%s</h3>
  <img src='%s.png' alt='%s plot'>
</div>
''' % (div_name, imagename.replace(':', '%3A'), div_name)
    outfile.write(div)

class NTPViz(NTPStats):
    "Class for visualizing statistics from a single server."
    # Python takes single quotes here. Since no % substitution
    Common = """\
set terminal png size 900,600
set xdata time
set grid
set xlabel "Time (dd-hh:mm)"
set format x "%d-%H:%M"
set timefmt "%s"
set xtic rotate by -45 scale 0
set lmargin 12
set rmargin 12
"""

    def __init__(self, statsdir,
                 sitename=None, period=None, starttime=None, endtime=None):
        NTPStats.__init__(self, statsdir=statsdir, sitename=sitename,
                          period=period, starttime=starttime, endtime=endtime)
        if self.sitename is None:
            self.sitename = os.path.basename(statsdir)

    def local_offset_gnuplot(self):
        "Generate GNUPLOT code graphing local clock loop statistics"
        if not len( self.loopstats):
            sys.stderr.write("ntpviz: WARNING: no loopstats to graph\n")
            return ''
        sitename = self.sitename
        unit = "μs"
        multiplier = 1e6
        values = [float(line.split()[1]) for line in self.loopstats]
        values.sort()

        percs = self.percentiles( (99, 1), values)

        if 1e-6 > percs[99] and -1e-6 < percs[1]:
            # go to nanosec
            unit = "ns"
            multiplier = 1e9

        unit_f = "ppm"
        multiplier_f = 1
        values_f = [float(line.split()[2]) for line in self.loopstats]
        values_f.sort()

        percs_f = self.percentiles( (99, 1), values_f)

        if 1 > percs_f[99] and -1 < percs_f[1]:
            # go to nanosec
            unit_f = "ppb"
            multiplier_f = 1e3

        plot_template = NTPViz.Common + """\
set title "%(sitename)s: Local Clock Time/Frequency Offsets"
set ytics format "%%1.1f %(unit)s" nomirror textcolor rgb '#0060ad'
set y2tics format "%%2.1f %(unit_f)s" nomirror textcolor rgb '#dd181f'
set key bottom right box
set style line 1 lc rgb '#0060ad' lt 1 lw 1 pt 7 ps 0   # --- blue
set style line 2 lc rgb '#dd181f' lt 1 lw 1 pt 5 ps 0   # --- red
plot \
 "-" using 1:($2*%(multiplier)s) title "clock offset %(unit)s" with linespoints ls 1, \
 "-" using 1:($3*%(multiplier_f)s) title "frequency offset %(unit_f)s" with linespoints ls 2 axis x1y2
""" % locals()
        return plot_template + self.dump("loopstats") + "e\n" \
             + self.dump("loopstats")

    def local_temps_gnuplot(self):
        "Generate GNUPLOT code graphing local temperature statistics"
        sitename = self.sitename
        tempsmap = self.tempssplit()
        tempslist = list(tempsmap.keys())
        tempslist.sort()

        if not len( tempsmap) or not len( tempslist):
            sys.stderr.write("ntpviz: WARNING: no temps to graph\n")
            return ''

        temps_data = ()
        plot_data = ""
        for key in tempslist:
            plot_data += "\n".join(tempsmap[key]) + "\ne\n"
        # remove trailing "e\n"
        plot_data = plot_data[:-2]

        plot_template = NTPViz.Common + """\
set title "%(sitename)s: Local Temps"
set ytics format "%%1.1f °C" nomirror textcolor rgb '#0060ad'
set style line 1 lc rgb '#0060ad' lt 1 lw 1 pt 7 ps 0   # --- blue
plot \\
""" % locals()

        for key in tempslist:
            plot_template += "'-' using 1:3 title '%(key)s' with line, \\\n" \
                 % locals()

        # strip the trailing ", \n"
        plot_template = plot_template[:-4] + "\n"
        plot_template += plot_data
        return plot_template

    def local_gps_gnuplot(self):
        "Generate GNUPLOT code graphing local gps statistics"
        sitename = self.sitename
        gpsmap = self.gpssplit()
        gpslist = list(gpsmap.keys())
        gpslist.sort()

        if not len( gpsmap) or not len( gpslist):
            if 1 <= debug_level:
                sys.stderr.write("ntpviz: INFO: no gps data to graph\n")
            return ''

        gps_data = ()
        plot_data = ""
        for key in gpslist:
            d = "\n".join(gpsmap[key])
            plot_data += d + "\ne\n" + d + "\ne\n"
        # remove trailing "e\n"
        plot_data = plot_data[:-2]

        plot_template = NTPViz.Common + """\
set title "%(sitename)s: Local GPS
set ytics format "%%1.3f tdop" nomirror textcolor rgb '#0060ad'
set y2tics format "%%2.0f nSat"  nomirror textcolor rgb '#dd181f'
set style line 1 lc rgb '#0060ad' lt 1 lw 1 pt 7 ps 0   # --- blue
set style line 2 lc rgb '#dd181f' lt 1 lw 1 pt 5 ps 0   # --- red
plot \\
""" % locals()

        for key in gpslist:
            plot_template += """\
'-' using 1:3 title '%(key)s tdop' with line, \\
'-' using 1:4 title '%(key)s nSat' with line axis x1y2, \\
""" % locals()

        # strip the trailing ", \\n"
        plot_template = plot_template[:-4] + "\n"
        plot_template += plot_data
        return plot_template

    def local_error_gnuplot(self):
        "Plot the local clock frequency error."
        if not len( self.loopstats):
            sys.stderr.write("ntpviz: WARNING: no loopstats to graph\n")
            return ''
        sitename = self.sitename
        # grab and sort the values, no need for the timestamp, etc.
        values = [float(line.split()[2]) for line in self.loopstats]
        values.sort()

        multiplier = 1
        unit = "ppm"
        rnd = 3

        percs = self.percentiles( (99, 95, 5, 1), values)

        if 1 > percs[99] and -1 < percs[1]:
            # go to ppb
            multiplier = 1e3
            unit = "ppb"
            rnd = 0

        percs.update({k: round( v * multiplier, rnd) for k, v in list(percs.items())})
        ninetynine  = percs[99]
        ninetyfive  = percs[95]
        five        = percs[5]
        one         = percs[1]

        nf_m_f     = percs[95] - percs[5]
        nn_m_o     = percs[99] - percs[1]
        plot_template = NTPViz.Common + """\
set title "%(sitename)s: Local Clock Frequency Offset"
set ytics format "%%1.1f %(unit)s" nomirror
set key bottom right box
set style line 1 lc rgb '#0060ad' lt 1 lw 1 pt 7 ps 0   # --- blue
set style line 2 lc rgb '#dd181f' lt 1 lw 1 pt 5 ps 0   # --- red
set label 1 "99%% = %(ninetynine)s %(unit)s" at graph 0.01,0.3 left front
set label 2 "95%% = %(ninetyfive)s %(unit)s" at graph 0.01,0.25 left front
set label 3 " 5%% = %(five)s %(unit)s" at graph 0.01,0.2 left front
set label 4 " 1%% = %(one)s %(unit)s" at graph 0.01,0.15 left front
set label 5 "95%% - 5%% = %(nf_m_f)s %(unit)s" at graph 0.01,0.1 left front
set label 6 "99%% - 1%% = %(nn_m_o)s %(unit)s" at graph 0.01,0.05 left front
plot \
 "-" using 1:($3 * %(multiplier)s) title "local clock error" with linespoints ls 2, \
 %(ninetynine)s title "99th percentile", \
 %(ninetyfive)s title "95th percentile", \
 %(five)s title "5th percentile", \
 %(one)s title "1st percentile"
""" % locals()
        return plot_template + self.dump("loopstats")

    def loopstats_gnuplot(self, fld, title, legend, freq):
        "Generate GNUPLOT code of a given loopstats field"
        if not len( self.loopstats):
            sys.stderr.write("ntpviz: WARNING: no loopstats to graph\n")
            return ''

        multiplier = 1e6
        rnd = 3
        if freq:
            unit = "ppm"
        else:
            unit = "μs"

        sitename   = self.sitename
        # grab and sort the values, no need for the timestamp, etc.
        values = [float(line.split()[fld - 1]) for line in self.loopstats]
        values.sort()

        percs = self.percentiles( (99, 95, 5, 1), values)

        if 1e-3 <= percs[99] or -1e-3 >= percs[1]:
            # go to millisec
            multiplier = 1e3
            if freq:
                unit = "ppt"
            else:
                unit = "ms"
        elif 1e-6 > percs[99] and -1e-6 < percs[1]:
            # go to nanosec, or ppb
            multiplier = 1e9
            rnd = 0
            if freq:
                unit = "ppb"
            else:
                unit = "ns"

        percs.update({k: round( v * multiplier, rnd) \
                     for k, v in list(percs.items())})
        ninetynine  = percs[99]
        ninetyfive  = percs[95]
        five        = percs[5]
        one         = percs[1]

        nf_m_f     = ninetyfive - five
        nn_m_o     = ninetynine - one

        plot_template = NTPViz.Common + """\
set title "%(sitename)s: %(title)s"
set ytics format "%%1.1f %(unit)s" nomirror
set key top right box
set style line 1 lc rgb '#0060ad' lt 1 lw 1 pt 7 ps 0   # --- blue
set style line 2 lc rgb '#dd181f' lt 1 lw 1 pt 5 ps 0   # --- red
set label 1 "99%% = %(ninetynine)s %(unit)s" at graph 0.01,0.95 left front
set label 2 "95%% = %(ninetyfive)s %(unit)s" at graph 0.01,0.9 left front
set label 3 " 5%% = %(five)s %(unit)s" at graph 0.01,0.85 left front
set label 4 " 1%% = %(one)s %(unit)s" at graph 0.01,0.8 left front
set label 5 "95%% - 5%% = %(nf_m_f)s %(unit)s" at graph 0.01,0.75 left front
set label 6 "99%% - 1%% = %(nn_m_o)s %(unit)s" at graph 0.01,0.7 left front
plot \
 "-" using 1:($%(fld)d*%(multiplier)s) title "%(legend)s" with linespoints ls 1, \
 %(ninetynine)s title "99th percentile", \
 %(ninetyfive)s title "95th percentile", \
 %(five)s title "5th percentile", \
 %(one)s title "1st percentile"
""" % locals()
        return plot_template + self.dump("loopstats")

    def local_offset_jitter_gnuplot(self):
        "Generate GNUPLOT code of local clock loop standard deviation"
        return self.loopstats_gnuplot(4, "RMS Time Jitter", "Jitter", 0)

    def local_offset_stability_gnuplot(self):
        "Generate GNUPLOT code graphing local clock stability"
        return self.loopstats_gnuplot(5, "RMS Frequency Jitter", "Stability", 1)

    def peerstats_gnuplot(self, peerlist, fld, title, type):
        "Plot a specified field from peerstats."
        sitename = self.sitename
        peerdict = self.peersplit()
        if not peerlist:
            peerlist = list(peerdict.keys())
        if not len( peerlist):
            sys.stderr.write("ntpviz: WARNING: no peer data to graph\n")
            return ''
        peerlist.sort() # For stability of output
        peer_data = ()
        plot_data = ""
        labels = ""
        for key in peerlist:
            # Trickiness - we allow peerlist elements to be DNS names.
            # The socket.gethostbyname() call maps DNS names to IP addresses,
            # passing through literal IPv4 addresses unaltered.  However,
            # it barfs on either literal IPv6 addresses or refclock names.
            try:
                ip = socket.gethostbyname(key)
            except:
                # ignore it
                ip = key

            if ip in peerdict:
                plot_data += "\n".join(peerdict[ip]) + "\ne\n"
            else:
                sys.stderr.write("ntpviz: ERROR: No such peer as %s" % key)
                raise SystemExit(1)
        # remove trailing "e\n"
        plot_data = plot_data[:-2]

        unit = "μs"
        multiplier = 1e6
        rtt = 0
        percentages = ""
        if len(peerlist) == 1:
            # only one peer
            title += ": "+ peerlist[0]
            # grab and sort the values, no need for the timestamp, etc.
            values = [float(line.split()[fld - 1]) for line in peerdict[ip]]
            values.sort()

            percs = self.percentiles( (99, 95, 50, 5, 1), values)

            if 1e-3 <= percs[99] or -1e-3 >= percs[1]:
                # go to millisec
                unit = "ms"
                multiplier = 1e3
            elif 1e-6 > percs[99] and -1e-6 < percs[1]:
                # go to nanosec
                unit = "ns"
                multiplier = 1e9

            rnd = 3
            percs.update({k: round(v*multiplier, rnd) for k, v in list(percs.items())})
            ninetynine  = percs[99]
            ninetyfive  = percs[95]
            fifty       = percs[50]
            five        = percs[5]
            one         = percs[1]

            # show percentages
            nf_m_f     = ninetyfive - five
            nn_m_o     = ninetynine - one
            percentages = " %(fifty)s title '50th percentile', " \
                           % locals()

            labels = """\
set label 1 "99%% = %(ninetynine)s %(unit)s" at graph 0.01,0.95 left front
set label 2 "95%% = %(ninetyfive)s %(unit)s" at graph 0.01,0.90 left front
set label 3 "50%% = %(fifty)s %(unit)s" at graph 0.01,0.85 left front
set label 4 "5%% = %(five)s %(unit)s" at graph 0.01,0.80 left front
set label 5 "1%% = %(one)s %(unit)s" at graph 0.01,0.75 left front
set label 6 "95%% - 5%% = %(nf_m_f)s %(unit)s" at graph 0.01,0.70 left front
set label 7 "99%% - 1%% = %(nn_m_o)s %(unit)s" at graph 0.01,0.65 left front
""" % locals()

            if "offset" == type:

                rtt = 1
                # don't do rtt for reclocks
                if "127.127." == peerlist[0][:8]:
                    rtt = 0
        else:
            # many peers
            title += "s"

        plot_template = NTPViz.Common + """\
set title "%(sitename)s: %(title)s"
set ylabel ""
set ytics format "%%1.1f %(unit)s" nomirror
set key top right box
%(labels)s
plot \
""" % locals()
        plot_template += percentages
        for key in peerlist:
            label = self.ip_label(key)
            plot_template += "'-' using 1:($%(fld)s*%(multiplier)s) title '%(label)s' with line, \\\n" \
                 % locals()

        if 1 == rtt:
            plot_template += """\
'-' using 1:(($4+$5/2)*%(multiplier)s) title 'offset+rtt/2' with line, \\
'-' using 1:(($4-$5/2)*%(multiplier)s) title 'offset-rtt/2' with line
""" % locals()
            plot_template += plot_data + "\ne\n" + plot_data + "\ne\n"
        else:
            # strip the trailing ", \n"
            plot_template = plot_template[:-4] + "\n"

        plot_template += plot_data
        return plot_template

    def peer_offsets_gnuplot(self, peerlist=None):
        return self.peerstats_gnuplot(peerlist, 4, "Peer Clock Offset", "offset")

    def peer_jitters_gnuplot(self, peerlist=None):
        return self.peerstats_gnuplot(peerlist, 7, "Peer Clock Jitter", "jitter")

    def local_offset_histogram_gnuplot(self):
        "Plot a histogram of clock offset values from loopstats."
        if not len( self.loopstats):
            sys.stderr.write("ntpviz: WARNING: no loopstats to graph\n")
            return ''
        sitename = self.sitename

        # TODO normalize to 0 to 100

        # grab and sort the values, no need for the timestamp, etc.
        values = [float(line.split()[1]) for line in self.loopstats]
        values.sort()

        percs = self.percentiles( (99, 95, 5, 1), values)

        unit = "μs"
        multiplier = 1e6
        rnd = 2
        rnd1 = 7        # round to 100 ns boxes
        boxwidth = 1e-7
        if 1e-6 > percs[99] and -1e-6 < percs[1]:
            # go to nanosec
            unit = "ns"
            multiplier = 1e9
            rnd = 0
            rnd1 = 9        # round to 1 ns boxes
            boxwidth = 1e-9

        percs.update({k: round(v*multiplier, rnd) for k, v in list(percs.items())})
        ninetynine  = percs[99]
        ninetyfive  = percs[95]
        five        = percs[5]
        one         = percs[1]

        cnt = collections.Counter()
        for value in values:
            # put into buckets
            # for a +/- 50 microSec range that is 1,000 buckets to plot
            cnt[ round( float(value), rnd1)] += 1

        mu = mean( values )
        values_mean = mu * multiplier
        values_mean_str = str( round( values_mean, rnd ) )

        values_pstd = round( pstdev( values, mu=mu ) * multiplier, rnd)

        # plus/minus of one sigma range
        m1sigma = values_mean - values_pstd
        p1sigma = values_mean + values_pstd


# skip the mean
#set label 3 "mean = %(values_mean_str)s μs" at graph 0.01,0.3  left front

        plot_template = '''\
set terminal png size 900,600
set grid
set boxwidth %(boxwidth)s
set xtic rotate by -45 scale 0
set title "%(sitename)s: Local Clock Time Offset - Histogram"
set xtics format "%%1.1f %(unit)s" nomirror
set style arrow 1 nohead
set arrow from %(m1sigma)s,graph 0 to %(m1sigma)s,graph 0.90 as 1
set style arrow 2 nohead
set arrow from %(p1sigma)s,graph 0 to %(p1sigma)s,graph 0.90 as 2
set style arrow 3 nohead
set arrow from %(ninetynine)s,graph 0 to %(ninetynine)s,graph 0.30 as 3
set style arrow 4 nohead
set arrow from %(ninetyfive)s,graph 0 to %(ninetyfive)s,graph 0.45 as 4
set style arrow 5 nohead
set arrow from %(five)s,graph 0 to %(five)s,graph 0.45 as 5
set style arrow 6 nohead
set arrow from %(one)s,graph 0 to %(one)s,graph 0.30 as 6
set key off
set lmargin 12
set rmargin 12
set style fill solid 0.5
set label 1 "-1σ" at %(m1sigma)s, graph 0.96  left front offset -1,-1
set label 2 "+1σ" at %(p1sigma)s, graph 0.96  left front offset -1,-1
set label 3 "99%%" at %(ninetynine)s, graph 0.35  left front offset -1,-1
set label 4 "95%%" at %(ninetyfive)s, graph 0.50  left front offset -1,-1
set label 5 "1%%" at %(one)s, graph 0.35  left front offset -1,-1
set label 6 "5%%" at %(five)s, graph 0.50  left front offset -1,-1
set label 10 "1σ = %(values_pstd)s %(unit)s" at graph 0.99,0.95 right front
set label 11 "99%% = %(ninetynine)s %(unit)s" at graph 0.99,0.90 right front
set label 12 "95%% = %(ninetyfive)s %(unit)s" at graph 0.99,0.85 right front
set label 13 "5%% = %(five)s %(unit)s" at graph 0.99,0.80 right front
set label 14 "1%% = %(one)s %(unit)s" at graph 0.99,0.75 right front
plot \
 "-" using ($1 * %(multiplier)s):2 title "histogram" with boxes
''' % locals()
        vals = list(cnt.keys())
        vals.sort()
        histogram_data = ["%s %s\n" % (val, cnt[val]) for val in vals]
        return plot_template + "".join(histogram_data)

# Multiplotting can't live inside NTPViz because it consumes a list
# of such objects, not a single one.

def local_offset_multiplot(statlist):
    "Plot comparative local offsets for a list of NTPViz objects."
    plot = NTPViz.Common + '''\
set title "Local Clock Offsets"
set ytics format "%%1.2f μs" nomirror textcolor rgb "#0060ad"
set key bottom right box
plot \\
'''
    # FIXME: We probably need to be more flexible about computing the plot label
    sitenames = [os.path.basename(os.path.dirname(d)) for d in statsdirs]
    for (i, stats) in enumerate(statlist):
        plot += '"-" using 1:($2*1000000) title "%s clock offset μs" with linespoints, \\\n' % (sitenames[i])
    plot = plot[:-4] + "\n"
    for stats in statlist:
        plot += stats.dump("loopstats") + "e\n"
    plot = plot[:-2]
    return plot

# here is how to create the base64 from an image file:
# with open("path/to/file.png", "rb") as f:
#    data = f.read()
#    print data.encode("base64")
#
ntpsec_logo = """
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
"""

ntpsec_ico = """\
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAAAAAAAP+fn59gn5+fYJ+fn2Cfn59gn5+fYJ+fn2Cfn59gn5+fYJ+fn2Cf
n59gn5+fYJ+fn2B/f39/AAAA/wAAAAAAAAAAAAAA/5+fn2Cfn59gn5+fYJ+fn2Cfn59gn5+fYJ+f
n2Cfn59gn5+fYJ+fn2Cfn59gAAAA/wAAAAAAAAAAAAAAAAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAA/5+fn2Cfn59g
n5+fYJ+fn2Cfn59gn5+fYJ+fn2Cfn59gn5+fYAAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+f
n59gn5+fYAAAAP8AAAD/AAAA/wAAAP8AAAD/n5+fYJ+fn2AAAAD/AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAD/n5+fYAAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+fn59gAAAA/wAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA/5+fn2AAAAD/AAAAAAAAAAAAAAD/AAAA/01NTWAAAAD/n5+fYAAAAP8AAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAP+fn59gAAAA/wAAAAAAAAAAAAAA/wAAAAAAAAAAAAAA/5+fn2AA
AAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/n5+fYAAAAP8AAAAAAAAAAE1NTWAAAAAAAAAAAAAA
AP+fn59gAAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/5+fn2Cfn59gAAAA/wAAAP8AAAD/AAAA
/wAAAP+fn59gn5+fYAAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAEBAf+fn59gn5+fYJ+fn2Cfn59g
n5+fYJ+fn2Cfn59gn5+fYJ+fn2AAAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAD/AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAAAAAAAAAAAAAAAAAA
/wAAAAAAAAD/AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAAAAAAA/wAAAAAAAAAA
AAAAAAAAAP8AAAD/AAAA/wAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAAAAAAD/AAAA/wAAAP8A
AAAAgAAAAL/+AADf/QAAwAEAAO/7AADsGwAA6+sAAOsrAADrawAA6+sAAOwbAADv+wAA4AMAAN/9
AADRxQAAxBEAAA==
"""

if __name__ == '__main__':
    try:
        (options, arguments) = getopt.getopt(sys.argv[1:], "d:e:ghn:o:p:s:D:", [
            "local-offset", "local-error", "local-jitter", "local-stability",
            "local-offset-histogram",
            "all-peer-offsets", "peer-offsets=",
            "all-peer-jitters", "peer-jitters=",
            "local-temps",
            "local-gps",
            "local-offset-multiplot",
        ])
    except getopt.GetoptError as err:
        sys.stderr.write(str(err) + "\n")
        raise SystemExit(2)
    sitename = None
    statsdirs = ["/var/log/ntpstats"]
    period = endtime = starttime = None
    generate = False
    show_local_offset = show_local_error = show_local_jitter = False
    show_local_stability = show_local_offset_histogram = show_temps = False
    show_local_offset_multiplot = show_gps = False
    show_peer_offsets = show_peer_jitters = None
    outdir = "ntpgraphs"
    debug_level = 0
    for (switch, val) in options:
        if switch == "-d":
            statsdirs = [os.path.expanduser(path) for path in val.split(",")]
        elif switch == "-e":
            endtime = iso_to_posix(val)
        elif switch == "-g":
            generate = True
        elif switch == "-h":
            sys.stdout.write(__doc__)
            raise SystemExit(0)
        elif switch == "-n":
            sitename = val
        elif switch == "-p":
            period = int( float(val) * NTPStats.SecondsInWeek)
        elif switch == "-s":
            starttime = iso_to_posix(val)
        elif switch == "-o":
            outdir = val
        elif switch == "-D":
            debug_level = int(val)      # Debug level, 0 to 9, 9 most verbose
        elif switch == "--local-offset":
            show_local_offset = True
        elif switch == "--local-error":
            show_local_error = True
        elif switch == "--local-jitter":
            show_local_jitter = True
        elif switch == "--local-stability":
            show_local_stability = True
        elif switch == "--local-offset-histogram":
            show_local_offset_histogram = True
        elif switch == "--peer-offsets":
            show_peer_offsets = val.split(",")
        elif switch == "--all-peer-offsets":
            show_peer_offsets = []
        elif switch == "--peer-jitters":
            show_peer_jitters = val.split(",")
        elif switch == "--all-peer-jitters":
            show_peer_jitters = []
        elif switch == "--local-temps":
            show_temps = True
        elif switch == "--local-gps":
            show_gps = True
        elif switch == "--local-offset-multiplot":
            show_local_offset_multiplot = True
    if 0 < debug_level:
        sys.stderr.write("ntpviz: INFO: now running at debug: %s\n" % \
            debug_level)
        if 9 == debug_level:
            # crazy debug, also profile
            import cProfile, pstats
            pr = cProfile.Profile()
            pr.enable()

            # register to dump debug on all normal exits
            atexit.register( print_profile )


    nice = 19       # always run nicely
    if 0 != nice:
        try:
            import psutil
            # set ionice() to idle
            p = psutil.Process(os.getpid())
            p.ionice(psutil.IOPRIO_CLASS_IDLE)

        except ImportError:
            if 0 < debug_level:
                sys.stderr.write("ntpviz: INFO: psutils not found\n")
            pass

        # set nice()
        nice = os.nice( nice )
        if 2 < debug_level:
            sys.stderr.write("ntpviz: INFO: now running at nice: %s\n" % \
                nice)

    statlist = [NTPViz(statsdir=d, sitename=sitename,
                       period=period, starttime=starttime, endtime=endtime)
                for d in statsdirs]

    for fontpath in ("/usr/share/fonts/liberation",
                     "/usr/share/fonts/liberation-fonts",
                     "/usr/share/fonts/truetype/liberation"):

        if os.path.exists(fontpath):
            os.environ["GDFONTPATH"] = fontpath
            break
    else:
        sys.stderr.write("ntpviz: WARNING: liberation truetype fonts not found\n")
    os.environ["GNUPLOT_DEFAULT_GDFONT"] = "LiberationSans-Regular"

    if len(statlist) == 1:
        stats = statlist[0]
        if show_local_offset or show_local_error or show_local_jitter or show_local_stability or show_local_offset_histogram:
            if not len( stats.loopstats ):
                sys.stderr.write("ntpviz: ERROR: missing loopstats data\n")
                raise SystemExit(1)
            if show_local_offset + show_local_error + show_local_jitter + show_local_stability + show_local_offset_histogram > 1:
                sys.stderr.write("ntpviz: ERROR: clash of mode options\n")
                raise SystemExit(1)
            if show_local_offset:
                plot = stats.local_offset_gnuplot()
            if show_local_error:
                plot = stats.local_error_gnuplot()
            if show_local_jitter:
                plot = stats.local_offset_jitter_gnuplot()
            if show_local_stability:
                plot = stats.local_offset_stability_gnuplot()
            if show_local_offset_histogram:
                plot = stats.local_offset_histogram_gnuplot()
            if generate:
                gnuplot(plot)
            else:
                sys.stdout.write(plot)
            raise SystemExit(0)

        if show_peer_offsets is not None or show_peer_jitters is not None:
            if not len( stats.peerstats ):
                sys.stderr.write("ntpviz: ERROR:  missing peerstats data\n")
                raise SystemExit(1)
            if show_peer_offsets is not None:
                plot = stats.peer_offsets_gnuplot(show_peer_offsets)
            if show_peer_jitters is not None:
                plot = stats.peer_jitters_gnuplot(show_peer_jitters)
            if generate:
                gnuplot(plot)
            else:
                sys.stdout.write(plot)
            raise SystemExit(0)

        if show_temps:
            if not len( stats.temps):
                sys.stderr.write("ntpviz: ERROR: missing temps data\n")
                raise SystemExit(1)
            if show_temps is not None:
                plot = stats.local_temps_gnuplot()
            if generate:
                gnuplot(plot)
            else:
                sys.stdout.write(plot)
            raise SystemExit(0)

        if show_gps:
            if not len( stats.gpsd):
                sys.stderr.write("ntpviz: ERROR: missing gps data\n")
                raise SystemExit(1)
            plot = stats.local_gps_gnuplot()
            if generate:
                gnuplot(plot)
            else:
                sys.stdout.write(plot)
            raise SystemExit(0)

    if show_local_offset_multiplot:
        plot = local_offset_multiplot(statlist)
        if generate:
            gnuplot(plot)
        else:
            sys.stdout.write(plot)
        raise SystemExit(0)

    # Fall through to HTML code generation
    if not os.path.isdir(outdir):
        try:
            os.mkdir(outdir)
        except SystemError:
            sys.stderr.write("ntpviz: ERROR: %s can't be created.\n" \
                 % outdir)
            raise SystemExit(1)

    # if no ntpsec favicon.ico, write one.
    ico_filename = os.path.join(outdir, "favicon.ico")
    if not os.path.lexists( ico_filename ):
        with open( ico_filename, "w" ) as wp:
            wp.write(binascii.a2b_base64(ntpsec_ico))

    # if no ntpsec logo, write one.
    logo_filename = os.path.join(outdir, "ntpsec-logo.png")
    if not os.path.lexists( logo_filename ):
        with open( logo_filename, "w" ) as wp:
            wp.write(binascii.a2b_base64(ntpsec_logo))

    explanations = {
        "local-offset": """\
<p>The offsets of the ntpd calculated time and the local system clock.
Showing frequency offset (red, in parts per million, scale on right) and
the time offset (blue, in μs, scale on left).  These are fields 4 and 3
from the loopstats log file.  Quick changes in time offset will lead to
larger frequency offsets.</p>
""",

        "local-error": """\
<p>This shows the frequency offset of the local clock (aka drift).
It comes from field 3 of the loopstats log file.  The graph includes
percentile data to show how much the frequency changes over a longer
period of time.  The majority of this change should come from
temperature changes (ex: HVAC, the weather, CPU usage causing local
heating).</p>

<p>Smaller changes are better.  An ideal result would be a horizontal
line at 0ppm.</p>

<p>Expected values of 99%-1% percentiles: 0.4ppm</p>
""",
        "local-offset-histogram": """\
<p>This shows the clock offsets of the local clock as a histogram.  It
includes 1%, 5%, 95%, and 99% percentiles to show the performance of
the system.</p>
""",
        "local-stability": """\
<p>This shows the frequency jitter (aka wander) of the local clock's
frequency.  In other words, how fast it the local clock changes freqency.
This is field 6 in the loopstats log file.</p>
<p>Lower is better.  An ideal clock would be a horizontal line at 0ppm.</p>
""",
        "local-gps": """\
<p>Local GPS.  These will be site specific.  It depends on running
a local gpsd daemon, and logging the data using gps-log.py.</p>
""",
        "local-jitter": """\
<p>This shows the jitter of the local clock offset.  In other words,
how fast the local clock offset is changing.  This is field 5 in the
loopstats log file</p>
<p>Lower is better.  An ideal system would be a horizontal line at 0μs.</p>
""",
        "local-temps": """\
<p>Local temperatures.  These will be site specific depending on what
temperature sensors you have and collect data from.  Temperature
changes change the local clock crystal frequency and stability.  Crystals
oscillate faster when warmer. This the single most important
component of frequency drift.</p>
""",
        "peer-jitter": """\
<p>This shows the jitter of a remote peer or server.  Jitter is the
current estimated dispersion; the variation in offset between samples.
This is field 8 in the loopstats log file.</p>
<p>Closer to 0s is better.  An ideal system would be a horizontal
line at 0s.</p>
""",
        "peer-jitters": """\
<p>This shows the jitter of all remote peers and servers.  Jitter is the
current estimated dispersion; the variation in offset between samples.
This is field 8 in the loopstats log file.</p>
<p>Closer to 0s is better.  An ideal system would be a horizontal
line at 0s.</p>
""",
        "peer-offset": """\
<p>This shows the offset of a peer or server in seconds.
This is field 5 from the loopstats log file.  This can be useful to
see if the measured  offset is changing.</p>
<p>The chart also plots offset±rtt.  Where rtt is the round trip time
to the remote.  NTP can not really know the offset of a remote chimer,
NTP computes it by subtracting rtt/2 from the offset.  Plotting the
offset±rtt reverses this calculation to easier see the effects of
rtt changes.</p>
""",
        "peer-offsets": """\
<p>This shows the offset of all peers and servers in seconds.
This is field 5 from the loopstats log file.  This can be useful to
see if offset changes are happening in a single clock or all clocks
together.</p>
<p>Closer to 0s is better.  An ideal system would be a horizontal line
at 0s. Typical 90% ranges may be: local serial GPS 200 ms; local LAN peer
80µs; local PPS 20µs.  90% ranges for WAN servers may be 4ms and much larger.
</p>
""",
    }

    start_time = datetime.datetime.utcnow()
    start_time_str = start_time.strftime("%c")

    # if title file, get title from it
    title_f = os.path.join(outdir, "title")
    title = 'ntpviz'
    if os.path.isfile(title_f):
        try:
            title_file = open( title_f, 'r')
            title = title_file.read()
        except IOError:
            pass

    index_header = '''\
<!DOCTYPE html>
<html lang="en">
<head>
<link rel="shortcut icon" href="favicon.ico">
<meta charset="UTF-8">
<meta http-equiv="refresh" content="1800">
<meta name="expires" content="0">
<title>%(title)s</title>
<style>
dt {
    font-weight: bold;
    margin-left: 20px;
}
dd {
    margin-top: 4px;
    margin-bottom: 10px;
}
</style>
</head>
<body>
<div style="width:910px">
<a href='https://www.ntpsec.org/'>
<img src="ntpsec-logo.png" alt="NTPsec" style="float:left;margin:5px 50px;">
</a>
<div>
<h1 style="margin-bottom:10px;">%(title)s</h1>
Report generated: %(start_time_str)s UTC <br>
''' % locals()

    # Ugh.  Not clear what to do in the multiplot case
    if len(statlist) == 1:
        index_header += 'Report Period: %1.1f days <br></div> ' \
                 % (float(stats.period) / float(NTPStats.SecondsInWeek))
    index_header += '<div style="clear:both;"></div>'

    index_trailer = '''\
<h2>Glossary:</h2>

<dl>
<dt>frequency offset:</dt>
<dd>The difference between the ntpd calculated frequency and the local
system clock frequency (usually in parts per million, ppm)</dd>

<dt>jitter:</dt>
<dd>The short term change in a value</dd>

<dt>ms, millisecond:</dt>
<dd>One thousandth of a second = 0.001s</dd>

<dt>ns, nanosecond:</dt>
<dd>One billionth of a second, also one thousandth of a microsecond,
0.000000001s.</dd>

<dt>ppb, parts per billion:</dt>
<dd>Ratio between two values. These following are all the same:
    1 ppb, one in one billion, 1/1000000000, 0.000000001, and 0.0000001%</dd>

<dt>ppm, parts per million:</dt>
<dd>Ratio between two values. These following are all the same:
    1 ppm, one in one million, 1/1000000, 0.000001, and 0.0001%</dd>

<dt>ppt, parts per thousand:</dt>
<dd>Ratio between two values. These following are all the same:
    1 ppt, one in one thousand, 1/1000, 0.001, and 0.1%</dd>

<dt>refclock:</dt>
<dd>Reference clock, a local GPS module or other local source of time.</dd>

<dt>remote clock:</dt>
<dd>Any clock reached over the network, LAN or WAN.  Also called a peer
or server.</dd>

<dt>time offset:</dt>
<dd>The difference between the ntpd calculated time and the local system
 clock's time.  (Also can be called phase offset)</dd>

<dt>upstream clock:</dt>
<dd>Any remote clock or reference clock used as a source of time.</dd>

<dt>σ, sigma:</dt>
<dd>Sigma denotes the standard deviation (SD) and is centered on the
arithmetic mean of the data set. The SD is simply the square root of
the variance of the data set.  Two sigma is simply twice the standard
deviation.  Three sigma is three times sigma.  Smaller is better.</dd>

<dt>µs, us, microsecond:</dt>
<dd>One millionth of a second, also one thousandth of a millisecond,
0.000001s.</dd>
</dl>

<br>
<br>
<br>
<div style="float:left">
This page autogenerated by <a href="https://docs.ntpsec.org/latest/ntpviz.html">
ntpviz</a>, part of the <a href="https://www.ntpsec.org/">NTPsec project</a>
</div>
<div style="float:left;margin-left:350px;">
    <a href="https://validator.w3.org/nu/">
    <img src="https://www.w3.org/html/logo/downloads/HTML5_Logo_32.png"
        alt="html 5">
    </a>
&nbsp;&nbsp;
    <a href="https://jigsaw.w3.org/css-validator/check/referer">
        <img style="border:0;width:88px;height:31px"
            src="https://jigsaw.w3.org/css-validator/images/vcss"
            alt="Valid CSS!" />
    </a>
</div>
<div style="clear:both;"></div>
</div>
</body>
</html>
'''
    imagewrapper = "<img src='%s.png' alt='%s plot'>\n"

    # buffer the index.html output so the index.html is not empty
    # during the run
    index_buffer = index_header
    # if header file, add it to index.html
    header = os.path.join(outdir, "header")
    if os.path.isfile(header):
        try:
            header_file = open( header, 'r')
            header_txt = header_file.read()
            index_buffer += '<br>\n' + header_txt + '\n'
        except IOError:
            pass

    if len(statlist) > 1:
        index_buffer += local_offset_multiplot(statlist)
    else:
        imagepairs = [
            ("local-offset", stats.local_offset_gnuplot()),
            ("local-error", stats.local_error_gnuplot()),
            ("local-jitter", stats.local_offset_jitter_gnuplot()),
            ("local-stability", stats.local_offset_stability_gnuplot()),
            ("local-offset-histogram", stats.local_offset_histogram_gnuplot()),
            ("local-temps", stats.local_temps_gnuplot()),
            ("local-gps", stats.local_gps_gnuplot()),
            ("peer-offsets", stats.peer_offsets_gnuplot()),
        ]

        peerlist = list(stats.peersplit().keys())
        # sort for output order stability
        peerlist = sorted( peerlist )
        for key in peerlist:
            imagepairs.append(("peer-offset-" + key,
                           stats.peer_offsets_gnuplot([key])))
        imagepairs.append(("peer-jitters",
                           stats.peer_jitters_gnuplot()))
        for key in peerlist:
            plot = stats.peer_jitters_gnuplot([key])
            if len( plot ):
                imagepairs.append(("peer-jitter-" + key, plot))

        for (imagename, image) in imagepairs:
            if not image:
                continue
            div_name = imagename.replace('-', ' ')
            index_buffer += "<div>\n<h2>%s:</h2>\n" % div_name
            if 'peer-jitter-' == imagename[:12]:
                exp = 'peer-jitter'
            elif 'peer-offset-' == imagename[:12]:
                exp = 'peer-offset'
            else:
                exp = imagename
            if exp in explanations:
                index_buffer += "<div>\n%s</div>\n" % explanations[exp]
            gnuplot(image, os.path.join(outdir, imagename + ".png"))
            index_buffer += imagewrapper % \
                             (imagename.replace(':', '%3A'), div_name)
            index_buffer += "</div>\n"

    # if footer file, add it to index.html
    footer = os.path.join(outdir, "footer")
    if os.path.isfile(footer):
        try:
            footer_file = open( footer, 'r')
            footer_txt = footer_file.read()
            index_buffer += '<br>\n' + footer_txt + '\n'
        except IOError:
            pass
    index_buffer += index_trailer

    # and send the file buffer
    with open(os.path.join(outdir, "index.html"), "w") as ifile:
        ifile.write(index_buffer)
        ifile.close()

# end
